# ----------------------------------------------------------------------------
# Copyright 2023 Drunella
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licen~ses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------

FEATURES {
    STARTADDRESS:    default = $3a00;
}


SYMBOLS {
    __LOADADDR__:  type = import;
    __STACKSIZE__: type = weak, value = $0800; # 1k stack
#    __HIMEM__:     type = weak, value = $D000;
}

MEMORY {
    ZP:        file = "", define = yes, start = $0002,     size = $001A;
    ZP_IO:     file = "", define = yes, start = $0042,     size = $0008;
    BSS:       file = "",               start = $7000,     size = $1000;
    LOADADDR:  file = %O,               start = %S - 2,    size = $0002;
    MAIN:      file = %O, define = yes, start = $3a00,     size = $3600;
    ROM:       file = "", define = yes, start = $b000,     size = $2000;

#    GAMELOADER:       file = "", start = $1800, size = $0300, fill = yes, fillval = $00;

#    CLEARCLC_CALL:    file = "", start = $be00, size = $0002, fill = yes, fillval = $00;
#    LOADFILE_CALL:    file = "", start = $be02, size = $0038, fill = yes, fillval = $00;
#    LOAD_DATA:        file = "", start = $be40, size = $003a, fill = yes, fillval = $00;
#    LOADSECTOR_CALL:  file = "", start = $be7a, size = $0004, fill = yes, fillval = $00;
#    LOADFILE_BODY:    file = "", start = $c500, size = $0300, fill = yes, fillval = $00;
#    LOADSECTOR_BODY:  file = "", start = $c300, size = $0180, fill = yes, fillval = $00;

}

SEGMENTS {
    ZEROPAGE: load = ZP,       type = zp;
    LOADADDR: load = LOADADDR, type = ro;
    STARTUP:  load = MAIN,     type = ro,  start = $3a00;
    LOWCODE:  load = MAIN,     type = ro,  optional = yes;
    CODE:     load = MAIN,     type = ro;
    RODATA:   load = MAIN,     type = ro;
    DATA:     load = MAIN,     type = rw;
    INIT:     load = MAIN,     type = rw;
    ONCE:     load = MAIN,     type = ro,  define   = yes;
    BSS:      load = BSS,      type = bss, define   = yes;
    HEAP:     load = BSS,      type = bss, optional = yes;

#    LOAD_EAPI:        load = MAIN,  type = rw;
#
#    IOLOADER:         load = MAIN, type = rw;
#    GAMELOADER:       load = MAIN, type = rw, run = GAMELOADER,      define = yes;
#    CLEARCLC_CALL:    load = MAIN, type = rw, run = CLEARCLC_CALL,   define = yes;
#    LOADFILE_CALL:    load = MAIN, type = rw, run = LOADFILE_CALL,   define = yes;
#    LOAD_DATA:        load = MAIN, type = rw, run = LOAD_DATA,       define = yes;
#    LOADSECTOR_CALL:  load = MAIN, type = rw, run = LOADSECTOR_CALL, define = yes;
#    LOADFILE_BODY:    load = MAIN, type = rw, run = LOADFILE_BODY,   define = yes;
#    LOADSECTOR_BODY:  load = MAIN, type = rw, run = LOADSECTOR_BODY, define = yes;
#    SECTOR_ROM:       load = ROM,  type = ro, run = ROM,             define = yes;

}

FEATURES {
    CONDES: type    = constructor,
            label   = __CONSTRUCTOR_TABLE__,
            count   = __CONSTRUCTOR_COUNT__,
            segment = ONCE;
    CONDES: type    = destructor,
            label   = __DESTRUCTOR_TABLE__,
            count   = __DESTRUCTOR_COUNT__,
            segment = RODATA;
    CONDES: type    = interruptor,
            label   = __INTERRUPTOR_TABLE__,
            count   = __INTERRUPTOR_COUNT__,
            segment = RODATA,
            import  = __CALLIRQ__;
}
