Bard's Tale 3
=============

- Calculations (ok)
  3 Disks: 524544 (assuming no hidden data)
  Character disk unknown content (seems to be nearly empty)
  should be enough for character storage
  
- prodos analyse (ok)
  + io access to all files
  + how are savegames and gamestates stored?

- disable disk switches (ok)
  + diskswitch request sets the current disk to properly load or save sectors

- disable code wheel
  + ignore the code wheel
  + try to completely disable it

- character import
  + loader with modified util64

- character editor

- simple loader of all files (ok)
  + simple table with id for loading of the different files

- savegame management
  which sectors wil be changed?
  savegame: 010b, 010c, 010d (1536 bytes)
  camp: 0110, 0111, 0112, 0113, 0114, 0115, 0116, 0117 (4096 bytes)

- saving gamestats and characters
  character disk
  savegame: sectors: 0x10b, 0x10c, 0x10d (3 sectors: 1536 bytes)
  roster: sectors: 0x110 to 0x117 (8 sectors: 4096 bytes)


File loading from easyflash
===========================

- small code to load up to 16 files from easyflash
- do not use ef filesystem, not necessary, simple system sufficient
- identify files by number, have a directory for 16 files, takes up on page (256 bytes)
- directory entry
  0: id (1); value of ff means no file present
  1: relative bank number (1)
  2: bank offset low/high (2)
  4: size (low/high/upper) (3)
  7: load address (low/high) (2)
  9: init call offset (low/high) (2) ; when value is zero do not call, call may not return
  11: reserved (5)

                        

Startup
=======

load "PRODOS" loader
load "2.0" (contains basic os routines)
initialize
load BARD64.SYSTEM from prodos filesystem to $2000 (will be replaced)
load MAINPIC64 from prodos filesystem to $0800
load DMUSIC64 from prodos filesystem to $e000
load SPLASH64 from prodos filesystem to $4000
intro running
load game
load UTIL64 from prodos filesystem to $2000 (6652)
load BARD3.PIC64 from prodos filesystem to $2000 (9600)
load MUSIC64 from prodos filesystem to $4800 (2168)
load BARDSUBS2 from prodos filesystem to $cd00 (13000)
load BARDSUBS1 from prodos filesystem to $6600 (11511)
  2.0 partially overwritten

important subs
- jsr BE7A ; load prodos sector (sector no in $46/$47)
  $42 mode (1: read, 2: write, 3:?)
  $43
  $44 low address destination buffer
  $45 high address destination buffer
  $46 low sector number 
  $47 high sector number 


Sector calculation
==================

                          $47     $46     
sector bits            76543210 76543210
                       HHHHHHHH LLLLLLLL
                              x xxxxxxxx (max 332)
                              B BBBAAAAA0                         
ef bits:                  76543 210543210

sector bits:           76543210-76543210
                                00111001

rol 1                         7-76543210
                              0-0111001 (no carry)

map to ef                76543210-543210-76543210
                              001-11001 (no carry)


Save game
=========
saving sectors: 010b, 010c, 010d
save game:
block 267.0: track=28, sector=9
block 267.5: track=28, sector=2
block 268.0: track=28, sector=13
block 268.5: track=28, sector=6
block 269.0: track=28, sector=17
block 269.5: track=28, sector=10

characters:
block 272.0: track=29, sector=11
block 272.5: track=29, sector=4
block 273.0: track=29, sector=15
block 273.5: track=29, sector=8
block 274.0: track=29, sector=1
block 274.5: track=29, sector=12
block 275.0: track=29, sector=5
block 275.5: track=29, sector=16
block 276.0: track=29, sector=9
block 276.5: track=29, sector=2
block 277.0: track=29, sector=13
block 277.5: track=29, sector=6
block 278.0: track=29, sector=17
block 278.5: track=29, sector=10
block 279.0: track=29, sector=3
block 279.5: track=29, sector=14

